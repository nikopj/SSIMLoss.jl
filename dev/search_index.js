var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SSIMLoss","category":"page"},{"location":"#SSIMLoss","page":"Home","title":"SSIMLoss","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SSIMLoss.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SSIMLoss]","category":"page"},{"location":"#SSIMLoss.ssim-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, AbstractArray{T, N}}, Tuple{AbstractArray{T, N}, AbstractArray{T, N}, Any}} where {T, N}","page":"Home","title":"SSIMLoss.ssim","text":"ssim(x, y, kernel=ssim_kernel(x); peakval=1, crop=true, dims=:)\n\nReturn the structural similarity index measure (SSIM) between two signals. SSIM is computed via the mean of a sliding window of statistics computed between the two signals. By default, the sliding window is a Gaussian with side-length 11 in each signal dimension and σ=1.5. crop=false will pad x and y  such that the sliding window computes statistics centered at every pixel of the input (via same-size convolution).  ssim computes statistics independently over channel and batch dimensions. x and y may be 3D/4D/5D tensors with channel and batch-dimensions.\n\npeakval=1 is the standard for image comparisons, but in practice should be set to the maximum value of your signal type. \n\ndims determines which dimensions to average the computed statistics over. If dims=1:ndims(x)-1, SSIM will be computed for each batch-element separately.\n\nThe results of ssim are matched against those of ImageQualityIndexes for grayscale and RGB images (i.e. x, y both of size (N1, N2, 1, B) and (N1, N2, 3, B) for grayscale and color images, resp.).\n\nSee also ssim_loss, ssim_loss_fast.\n\n\n\n\n\n","category":"method"},{"location":"#SSIMLoss.ssim_kernel-Tuple{Type, Integer}","page":"Home","title":"SSIMLoss.ssim_kernel","text":"ssim_kernel(T, N)\n\nReturn Gaussian kernel with σ=1.5 and side-length 11 for use in ssim. Returned kernel will be N-2 dimensional of type T.\n\n\n\n\n\n","category":"method"},{"location":"#SSIMLoss.ssim_kernel-Union{Tuple{Array{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Home","title":"SSIMLoss.ssim_kernel","text":"ssim_kernel(x::AbstractArray{T, N}) where {T, N}\n\nReturn Gaussian kernel with σ=1.5 and side-length 11 for use in ssim.  Returned array will be on the same device as x.\n\n\n\n\n\n","category":"method"},{"location":"#SSIMLoss.ssim_loss-Union{Tuple{T}, Tuple{AbstractArray{T}, Vararg{Any}}} where T","page":"Home","title":"SSIMLoss.ssim_loss","text":"ssim_loss(x, y, kernel=ssim_kernel(x); peakval=1, crop=true, dims=:)\n\nComputes 1 - ssim(x, y), suitable for use as a loss function with gradient descent. For faster training, it is recommended to store a kernel and reuse it, ex.,\n\nkernel = ssim_kernel(Float32, 2) |> gpu\n# or alternatively for faster computation\n# kernel = ones(Float32, 5, 5, 1, num_channels) |> gpu\n\nfor (x, y) in dataloader\n    x, y = (x, y) .|> gpu\n    grads = gradient(model) do m\n        x̂ = m(y)\n        ssim_loss(x, x̂, kernel)\n    end\n    # update the model ...\nend\n\nSee ssim for a detailed description of SSIM and the above arguments. See also ssim_loss_fast.\n\n\n\n\n\n","category":"method"},{"location":"#SSIMLoss.ssim_loss_fast-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, AbstractArray{T, N}}} where {T, N}","page":"Home","title":"SSIMLoss.ssim_loss_fast","text":"ssim_loss_fast(x, y; kernel_length=5, peakval=1, crop=true, dims=:)\n\nComputes ssim_loss with an averaging kernel instead of a large Gaussian kernel for faster computation. kernel_length specifies the averaging kernel side-length in each signal dimension of x, y.  See ssim for a detailed description of SSIM and the above arguments. \n\nSee also ssim_loss.\n\n\n\n\n\n","category":"method"}]
}
